# Generated by Django 5.1.3 on 2024-12-05 15:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AqiRef',
            fields=[
                ('id', models.BigAutoField(db_column='id', primary_key=True, serialize=False)),
                ('aqi', models.IntegerField(db_column='aqi', null=True)),
                ('pm25', models.IntegerField(db_column='pm25', null=True)),
                ('pm10', models.IntegerField(db_column='pm10', null=True)),
                ('o3', models.IntegerField(db_column='o3', null=True)),
                ('no2', models.IntegerField(db_column='no2', null=True)),
                ('so2', models.IntegerField(db_column='so2', null=True)),
                ('co', models.IntegerField(db_column='co', null=True)),
                ('t', models.IntegerField(db_column='t', null=True)),
                ('p', models.IntegerField(db_column='p', null=True)),
                ('h', models.IntegerField(db_column='h', null=True)),
                ('w', models.IntegerField(db_column='w', null=True)),
                ('time', models.BigIntegerField(db_column='time', null=True)),
                ('dew', models.IntegerField(db_column='dew', null=True)),
                ('wg', models.IntegerField(db_column='wg', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmployeePermission',
            fields=[
                ('id', models.BigAutoField(db_column='id', primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(db_column='user_id')),
                ('node_id', models.IntegerField(db_column='node_id')),
            ],
        ),
        migrations.CreateModel(
            name='NodeConfigurationBuffer',
            fields=[
                ('id', models.BigAutoField(db_column='id', primary_key=True, serialize=False)),
                ('action', models.IntegerField(db_column='action')),
                ('mac', models.TextField(db_column='mac', unique=True)),
                ('room_id', models.IntegerField(db_column='room_id')),
                ('time', models.BigIntegerField(db_column='time')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(db_column='id', primary_key=True, serialize=False)),
                ('room_id', models.IntegerField(db_column='room_id', unique=True)),
                ('construction_name', models.TextField(db_column='construction_name')),
                ('x_length', models.IntegerField(db_column='x_length', null=True)),
                ('y_length', models.IntegerField(db_column='y_length', null=True)),
                ('information', models.TextField(db_column='information', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.IntegerField(db_column='role', default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationNode',
            fields=[
                ('id', models.BigAutoField(db_column='id', primary_key=True, serialize=False)),
                ('node_id', models.BigIntegerField(db_column='node_id', null=True, unique=True)),
                ('x_axis', models.IntegerField(db_column='x_axis')),
                ('y_axis', models.IntegerField(db_column='y_axis')),
                ('z_axis', models.IntegerField(db_column='z_axis')),
                ('function', models.TextField(db_column='function')),
                ('mac', models.TextField(db_column='mac', null=True, unique=True)),
                ('uuid', models.TextField(db_column='uuid', null=True)),
                ('status', models.TextField(db_column='status', null=True)),
                ('time', models.BigIntegerField(db_column='time', null=True)),
                ('room_id', models.ForeignKey(db_column='room_id', on_delete=django.db.models.deletion.CASCADE, to='api.room', to_field='room_id', verbose_name='Refering to id of room where this node is implemented')),
            ],
        ),
        migrations.CreateModel(
            name='RawSensorMonitor',
            fields=[
                ('id', models.BigAutoField(db_column='id', primary_key=True, serialize=False)),
                ('node_id', models.IntegerField(db_column='node_id')),
                ('co2', models.SmallIntegerField(db_column='co2', null=True)),
                ('temp', models.FloatField(db_column='temp', null=True)),
                ('hum', models.FloatField(db_column='hum', null=True)),
                ('light', models.FloatField(db_column='light', null=True)),
                ('dust', models.FloatField(db_column='dust', null=True)),
                ('sound', models.FloatField(db_column='sound', null=True)),
                ('red', models.SmallIntegerField(db_column='red', null=True)),
                ('green', models.SmallIntegerField(db_column='green', null=True)),
                ('blue', models.SmallIntegerField(db_column='blue', null=True)),
                ('tvoc', models.SmallIntegerField(db_column='tvoc', null=True)),
                ('motion', models.SmallIntegerField(db_column='motion', null=True)),
                ('time', models.BigIntegerField(db_column='time')),
                ('room_id', models.ForeignKey(db_column='room_id', on_delete=django.db.models.deletion.CASCADE, to='api.room', to_field='room_id', verbose_name='Refering to id of room where this node is implemented')),
            ],
        ),
        migrations.CreateModel(
            name='RawActuatorMonitor',
            fields=[
                ('id', models.BigAutoField(db_column='id', primary_key=True, serialize=False)),
                ('node_id', models.IntegerField(db_column='node_id')),
                ('function', models.TextField(db_column='function')),
                ('current_value', models.TextField(db_column='current_value')),
                ('state', models.IntegerField(db_column='state')),
                ('mode', models.TextField(db_column='mode')),
                ('time', models.BigIntegerField(db_column='time')),
                ('room_id', models.ForeignKey(db_column='room_id', on_delete=django.db.models.deletion.CASCADE, to='api.room', to_field='room_id', verbose_name='Refering to id of room where this node is implemented')),
            ],
        ),
        migrations.CreateModel(
            name='EnergyData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('node_id', models.IntegerField(db_column='node_id')),
                ('function', models.TextField(db_column='function')),
                ('voltage', models.FloatField(db_column='voltage')),
                ('current', models.FloatField(db_column='current')),
                ('active_power', models.FloatField(db_column='active_power')),
                ('power_factor', models.FloatField(db_column='power_factor')),
                ('frequency', models.FloatField(db_column='frequency')),
                ('active_energy', models.FloatField(db_column='active_energy')),
                ('time', models.BigIntegerField(db_column='time')),
                ('room_id', models.ForeignKey(db_column='room_id', on_delete=django.db.models.deletion.CASCADE, to='api.room', to_field='room_id', verbose_name='Refering to id of room where this node is implemented')),
            ],
        ),
    ]
